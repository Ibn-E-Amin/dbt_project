
{% set POST_HOOK_SQL %}
    UPDATE target
    SET PO_END_DATE = u.RUN_TIME,
        PO_UPDATED_RUN_ID = '{{ var("run_id", "manual_run") }}'
    FROM {{ this }} AS target
    INNER JOIN (
        SELECT
            po.PO_INTERNAL_PARTY_ID AS CHANGED_RECORD_ID
            ,MAX(CAST(COALESCE(t.UPDATED_AT, t.RUN_TIME) AS DATE)) AS RUN_TIME
        FROM {{ ref('TEMP_PARTY_ORG') }} AS t
        INNER JOIN {{ this }} AS po
            ON t.ID = po.PO_INTERNAL_PARTY_ID
        WHERE (
                  (CASE WHEN t.PUBLICNAME NOT IN ('None','NAN','') THEN CAST(t.PUBLICNAME AS NVARCHAR(255)) END) <> COALESCE(po.PO_PUBLIC_NAME, 'nan')
                  OR (CASE WHEN t.INTERNALNAME NOT IN ('None','NAN','') THEN CAST(t.INTERNALNAME AS NVARCHAR(255)) END) <> COALESCE(po.PO_INTERNAL_NAME, 'nan')
                  OR (CASE WHEN t.LEGALENTITYNAME NOT IN ('None','NAN','') THEN CAST(t.LEGALENTITYNAME AS NVARCHAR(255)) END) <> COALESCE(po.PO_LEGAL_ENTITY_NAME, 'nan')
                  OR (CASE WHEN t.TAXPAYERID NOT IN ('None','NAN','') THEN CAST(t.TAXPAYERID AS NVARCHAR(100)) END) <> COALESCE(po.PO_TAXPAYER_ID, 'nan')
                  OR (CASE WHEN t.TIMEZONE NOT IN ('None','NAN','') THEN CAST(t.TIMEZONE AS NVARCHAR(100)) END) <> COALESCE(po.PO_TIME_ZONE, 'nan')
                  OR (CASE WHEN TRY_CAST(t.OPENTIMEGRANULARITY AS FLOAT) IS NOT NULL THEN TRY_CAST(t.OPENTIMEGRANULARITY AS FLOAT) END) <> COALESCE(po.PO_OPEN_TIME_GRANULARITY, 0)
                  OR (CASE WHEN TRY_CAST(t.CANCELDATE AS DATE) IS NOT NULL THEN TRY_CAST(t.CANCELDATE AS DATE) END) <> COALESCE(po.PO_CANCEL_DATE, '1900-01-01')
                  OR (CASE WHEN t.TRIALEXPIRATIONDATE NOT IN ('None','NAN','') THEN CAST(t.TRIALEXPIRATIONDATE AS NVARCHAR(100)) END) <> COALESCE(po.PO_TRIAL_EXPIRATION_DATE, 'nan')
                  OR (CASE WHEN t.SUSPENDED NOT IN ('None','NAN','') THEN CAST(t.SUSPENDED AS BIT) END) <> COALESCE(po.PO_SUSPENDED, 0)
                  OR (CASE WHEN t.BILLINGPLAN NOT IN ('None','NAN','') THEN CAST(t.BILLINGPLAN AS NVARCHAR(100)) END) <> COALESCE(po.PO_BILLING_PLAN, 'nan')
                  OR (CASE WHEN TRY_CAST(t.BILLINGMETHOD AS INT) IS NOT NULL THEN TRY_CAST(t.BILLINGMETHOD AS INT) END) <> COALESCE(po.PO_BILLING_METHOD, -100)
                  OR COALESCE(t.ACCOUNT_MANAGER, 'nan') <> COALESCE(po.PO_ACCOUNT_MANAGER, 'nan')
                  OR COALESCE(t.REGION, 'nan') <> COALESCE(po.PO_REGION, 'nan')
                  OR CAST(COALESCE(t.OPEN_SINCE, t.RUN_TIME) AS DATE) <> COALESCE(po.PO_OPEN_SINCE, '1900-01-01')
              )
        AND po.PO_END_DATE IS NULL
        AND po.PO_START_DATE <= CAST(COALESCE(t.UPDATED_AT, t.RUN_TIME) AS DATE)
        GROUP BY po.PO_INTERNAL_PARTY_ID
    ) AS u
    ON target.PO_INTERNAL_PARTY_ID = u.CHANGED_RECORD_ID
    WHERE target.PO_END_DATE IS NULL;
{% endset %}

{% set SCRIPT = var('script', 'INITIAL') %}
{% set RUN_ID = var('run_id', 'manual_run') %}
{% set BRAND = var('brand', 'Wallaby') %}
{% set ALGORITHM = var('algorithm', 'SHA2_256') %}
{% set PARTY_TYPE_CODE = var('party_type_code', 2) %}

{{
    config(
      materialized='incremental',
      unique_key='PO_INTERNAL_PARTY_ID',
      post_hook = [POST_HOOK_SQL] if var('script','INITIAL') == 'INCREMENTAL' else []
    )
}}

--===============================================--
--======== TEMP TABLE AND MIN DATE ==============--
--===============================================--
WITH TEMP AS (
    SELECT * FROM {{ ref('TEMP_PARTY_ORG') }}
),

MIN_DATE AS (
    SELECT
        ID
        ,MIN(CAST(COALESCE(UPDATED_AT, RUN_TIME) AS DATE)) AS MIN_START_DATE
    FROM TEMP
    GROUP BY ID
),

ORGS_TO_INSERT AS (
    --===============================================--
    --======== NEW ROWS (NOT YET IN TARGET) =========--
    --===============================================--
    SELECT
        HASHBYTES('{{ ALGORITHM }}', CONCAT(CAST(T.ID AS NVARCHAR(MAX)), '|', CAST({{ PARTY_TYPE_CODE }} AS NVARCHAR(MAX)), '|', '{{ BRAND }}')) AS PO_PARTY_ID
        ,CAST(T.ID AS INT) AS PO_INTERNAL_PARTY_ID
        ,{{ PARTY_TYPE_CODE }} AS PO_PARTY_TYPE_CODE
        ,CASE WHEN T.PUBLICNAME NOT IN ('None','NAN','') THEN CAST(T.PUBLICNAME AS NVARCHAR(255)) ELSE 'nan' END AS PO_PUBLIC_NAME
        ,CASE WHEN T.INTERNALNAME NOT IN ('None','NAN','') THEN CAST(T.INTERNALNAME AS NVARCHAR(255)) ELSE 'nan' END AS PO_INTERNAL_NAME
        ,CASE WHEN T.LEGALENTITYNAME NOT IN ('None','NAN','') THEN CAST(T.LEGALENTITYNAME AS NVARCHAR(255)) ELSE 'nan' END AS PO_LEGAL_ENTITY_NAME
        ,CASE WHEN T.TAXPAYERID NOT IN ('None','NAN','') THEN CAST(T.TAXPAYERID AS NVARCHAR(100)) ELSE 'nan' END AS PO_TAXPAYER_ID
        ,CASE WHEN T.TIMEZONE NOT IN ('None','NAN','') THEN CAST(T.TIMEZONE AS NVARCHAR(100)) ELSE 'nan' END AS PO_TIME_ZONE
        ,CASE WHEN TRY_CAST(T.OPENTIMEGRANULARITY AS FLOAT) IS NOT NULL THEN CAST(T.OPENTIMEGRANULARITY AS FLOAT) ELSE 0 END AS PO_OPEN_TIME_GRANULARITY
        ,CASE WHEN TRY_CAST(T.CANCELDATE AS DATE) IS NOT NULL THEN CAST(T.CANCELDATE AS DATE) ELSE NULL END AS PO_CANCEL_DATE
        ,CASE WHEN T.TRIALEXPIRATIONDATE NOT IN ('None','NAN','') THEN CAST(T.TRIALEXPIRATIONDATE AS NVARCHAR(100)) ELSE 'nan' END AS PO_TRIAL_EXPIRATION_DATE
        ,CASE WHEN T.SUSPENDED NOT IN ('None','NAN','') THEN CAST(T.SUSPENDED AS BIT) ELSE NULL END AS PO_SUSPENDED
        ,CASE WHEN T.BILLINGPLAN NOT IN ('None','NAN','') THEN CAST(T.BILLINGPLAN AS NVARCHAR(100)) ELSE 'nan' END AS PO_BILLING_PLAN
        ,CASE WHEN TRY_CAST(T.BILLINGMETHOD AS INT) IS NOT NULL THEN CAST(T.BILLINGMETHOD AS INT) ELSE NULL END AS PO_BILLING_METHOD
        ,COALESCE(T.ACCOUNT_MANAGER, 'nan') AS PO_ACCOUNT_MANAGER
        ,COALESCE(T.REGION, 'nan') AS PO_REGION
        ,COALESCE(CAST(T.OPEN_SINCE AS DATE), '1900-01-01') AS PO_OPEN_SINCE
        ,M.MIN_START_DATE AS PO_START_DATE
        ,'{{ RUN_ID }}' AS PO_CREATED_RUN_ID
        ,NULL AS PO_END_DATE
        ,NULL AS PO_UPDATED_RUN_ID
        ,'{{ BRAND }}' AS PO_BRAND
    FROM TEMP T
    INNER JOIN MIN_DATE M ON T.ID = M.ID
    LEFT JOIN {{ this }} P ON P.PO_INTERNAL_PARTY_ID = T.ID
    WHERE P.PO_INTERNAL_PARTY_ID IS NULL

    --===============================================--
    --======== INCREMENTAL HISTORY ROWS =============--
    --===============================================--
    {% if SCRIPT == 'INCREMENTAL' %}
    UNION ALL
    SELECT
        HASHBYTES('{{ ALGORITHM }}', CONCAT(CAST(T.ID AS NVARCHAR(MAX)), '|', CAST({{ PARTY_TYPE_CODE }} AS NVARCHAR(MAX)), '|', '{{ BRAND }}')) AS PO_PARTY_ID
        ,CAST(T.ID AS INT) AS PO_INTERNAL_PARTY_ID
        ,{{ PARTY_TYPE_CODE }} AS PO_PARTY_TYPE_CODE
        ,CASE WHEN T.PUBLICNAME NOT IN ('None','NAN','') THEN CAST(T.PUBLICNAME AS NVARCHAR(255)) ELSE 'nan' END AS PO_PUBLIC_NAME
        ,CASE WHEN T.INTERNALNAME NOT IN ('None','NAN','') THEN CAST(T.INTERNALNAME AS NVARCHAR(255)) ELSE 'nan' END AS PO_INTERNAL_NAME
        ,CASE WHEN T.LEGALENTITYNAME NOT IN ('None','NAN','') THEN CAST(T.LEGALENTITYNAME AS NVARCHAR(255)) ELSE 'nan' END AS PO_LEGAL_ENTITY_NAME
        ,CASE WHEN T.TAXPAYERID NOT IN ('None','NAN','') THEN CAST(T.TAXPAYERID AS NVARCHAR(100)) ELSE 'nan' END AS PO_TAXPAYER_ID
        ,CASE WHEN T.TIMEZONE NOT IN ('None','NAN','') THEN CAST(T.TIMEZONE AS NVARCHAR(100)) ELSE 'nan' END AS PO_TIME_ZONE
        ,CASE WHEN TRY_CAST(T.OPENTIMEGRANULARITY AS FLOAT) IS NOT NULL THEN CAST(T.OPENTIMEGRANULARITY AS FLOAT) ELSE 0 END AS PO_OPEN_TIME_GRANULARITY
        ,CASE WHEN TRY_CAST(T.CANCELDATE AS DATE) IS NOT NULL THEN CAST(T.CANCELDATE AS DATE) ELSE NULL END AS PO_CANCEL_DATE
        ,CASE WHEN T.TRIALEXPIRATIONDATE NOT IN ('None','NAN','') THEN CAST(T.TRIALEXPIRATIONDATE AS NVARCHAR(100)) ELSE 'nan' END AS PO_TRIAL_EXPIRATION_DATE
        ,CASE WHEN T.SUSPENDED NOT IN ('None','NAN','') THEN CAST(T.SUSPENDED AS BIT) ELSE NULL END AS PO_SUSPENDED
        ,CASE WHEN T.BILLINGPLAN NOT IN ('None','NAN','') THEN CAST(T.BILLINGPLAN AS NVARCHAR(100)) ELSE 'nan' END AS PO_BILLING_PLAN
        ,CASE WHEN TRY_CAST(T.BILLINGMETHOD AS INT) IS NOT NULL THEN CAST(T.BILLINGMETHOD AS INT) ELSE NULL END AS PO_BILLING_METHOD
        ,COALESCE(T.ACCOUNT_MANAGER, 'nan') AS PO_ACCOUNT_MANAGER
        ,COALESCE(T.REGION, 'nan') AS PO_REGION
        ,COALESCE(CAST(T.OPEN_SINCE AS DATE), '1900-01-01') AS PO_OPEN_SINCE
        ,M.MIN_START_DATE AS PO_START_DATE
        ,'{{ RUN_ID }}' AS PO_CREATED_RUN_ID
        ,NULL AS PO_END_DATE
        ,NULL AS PO_UPDATED_RUN_ID
        ,'{{ BRAND }}' AS PO_BRAND
    FROM TEMP T
    INNER JOIN MIN_DATE M ON T.ID = M.ID
    INNER JOIN {{ this }} P ON P.PO_INTERNAL_PARTY_ID = T.ID
    WHERE P.PO_INTERNAL_PARTY_ID IS NOT NULL
      AND P.PO_END_DATE IS NOT NULL
    {% endif %}
)

SELECT * FROM ORGS_TO_INSERT
{% if is_incremental() %}
WHERE 1=1
{% endif %}
;
