
{% set SCRIPT = var('script', 'INITIAL') %}
{% set RUN_ID = var('run_id', 'manual_run') %}
{% set BRAND = var('brand', 'Wallaby') %}
{% set ALGORITHM = var('algorithm', 'SHA2_256') %}
{% set PARTY_TYPE_CODE = 3 %}

--===============================================--
--======== UPDATE EXISTING CONTACTS =============--
--===============================================--
{% set UPDATE_SQL %}
    UPDATE TARGET
    SET 
        TARGET.PC_END_DATE = U.RUN_TIME,
        TARGET.PC_UPDATED_RUN_ID = '{{ RUN_ID }}'
    FROM {{ this }} AS TARGET
    INNER JOIN (
        SELECT
            C.ID AS CHANGED_RECORD_ID
            ,MAX(CAST(COALESCE(C.UPDATEDAT, C.RUN_TIME) AS DATE)) AS RUN_TIME
        FROM {{ ref('TEMP_PARTY_CONTACT') }} AS C
        INNER JOIN {{ this }} AS PC
            ON C.ID = PC.PC_INTERNAL_PARTY_ID
        WHERE (
            COALESCE(PC.PC_ORGANIZATION_ID, 0) <> CAST(COALESCE(C.ORGANIZATION_ID,0) AS INT)
         OR COALESCE(PC.PC_CAMPAIGN_ID, 0) <> C.CAM_CAMPAIGN_ID
         OR COALESCE(PC.PC_CHANNEL_ID, 0) <> C.CHN_CHANNEL_ID
         OR COALESCE(PC.PC_UTM_CAMPAIGN, 'nan') <> C.UTM_CAMPAIGN
         OR COALESCE(PC.PC_CAMPAIGN, 'nan') <> C.CAMPAIGN
         OR COALESCE(PC.PC_CHANNEL, 'nan') <> C.CHANNEL
         OR COALESCE(PC.PC_ACCOUNTING_CLASS, 'nan') <> C.ACCOUNTING_CLASS
         OR COALESCE(PC.PC_NAME, 'nan') <> COALESCE(C.NAME,'nan')
         OR COALESCE(PC.PC_COMPANY, 'nan') <> C.COMPANY
         OR COALESCE(PC.PC_CREATED_BY, 'nan') <> C.CREATED_BY
         OR COALESCE(PC.PC_ROLE, 'nan') <> C.ROLE
         OR COALESCE(PC.PC_CATEGORY, 'nan') <> C.CATEGORY
         OR COALESCE(PC.PC_SERVICE_CITY, 'nan') <> C.SERVICE_CITY
         OR COALESCE(PC.PC_SERVICE_STATE, 'nan') <> C.SERVICE_STATE
         OR COALESCE(PC.PC_SERVICE_POSTAL_CODE, 'nan') <> C.SERVICE_POSTAL_CODE
         OR COALESCE(PC.PC_LONGITUDE, 0.0) <> C.LONGITUDE
         OR COALESCE(PC.PC_LATITUDE, 0.0) <> C.LATITUDE
         OR COALESCE(PC.PC_CARD_ON_FILE, 0) <> C.CARDONFILE
         OR COALESCE(PC.PC_PAYMENT_ON_FILE_KIND, 'nan') <> C.PAYMENT_ON_FILE_KIND
         OR COALESCE(PC.PC_TAGS, 'nan') <> C.TAGS
         OR COALESCE(PC.PC_CREATED_AT, CAST('1900-01-01' AS DATETIME2)) <> C.CREATEDAT
         OR COALESCE(PC.PC_API_KEY, 'nan') <> C.API_KEY
         OR COALESCE(PC.PC_LIFETIME_VALUE, 0.0) <> C.LIFETIME_VALUE
         OR COALESCE(PC.PC_FLASH_MESSAGE, 'nan') <> C.FLASH_MESSAGE
         OR COALESCE(PC.PC_DELETE_FLAG, 0) <> C.DELETE_FLAG
        )
        AND PC.PC_END_DATE IS NULL
        AND PC.PC_START_DATE <= CAST(COALESCE(C.UPDATEDAT, C.RUN_TIME) AS DATE)
        GROUP BY C.ID
    ) AS U
    ON TARGET.PC_INTERNAL_PARTY_ID = U.CHANGED_RECORD_ID
    WHERE TARGET.PC_END_DATE IS NULL;
{% endset %}

{{
  config(
    materialized = 'incremental',
    unique_key = 'PC_PARTY_ID',
    post_hook = [UPDATE_SQL] if SCRIPT == 'INCREMENTAL' else []
  )
}}

--===============================================--
--======== BUILD MIN_DATE CTE ===================--
--===============================================--
WITH MIN_DATE AS (
    SELECT
        HASHBYTES('{{ ALGORITHM }}', CONCAT(C.ID, '|', {{ PARTY_TYPE_CODE }}, '|', '{{ BRAND }}')) AS PC_PARTY_ID
        ,C.ID AS PC_INTERNAL_PARTY_ID
        ,CAST({{ PARTY_TYPE_CODE }} AS INT) AS PC_PARTY_TYPE_CODE
        ,C.PC_PARTY_ORIGIN
        ,C.ORGANIZATION_ID AS PC_ORGANIZATION_ID
        ,C.CAM_CAMPAIGN_ID AS PC_CAMPAIGN_ID
        ,C.CHN_CHANNEL_ID AS PC_CHANNEL_ID
        ,C.UTM_CAMPAIGN AS PC_UTM_CAMPAIGN
        ,C.CAMPAIGN AS PC_CAMPAIGN
        ,C.CHANNEL AS PC_CHANNEL
        ,C.ACCOUNTING_CLASS AS PC_ACCOUNTING_CLASS
        ,COALESCE(C.NAME, 'nan') AS PC_NAME
        ,C.COMPANY AS PC_COMPANY
        ,C.CREATED_BY AS PC_CREATED_BY
        ,C.ROLE AS PC_ROLE
        ,C.CATEGORY AS PC_CATEGORY
        ,C.SERVICE_CITY AS PC_SERVICE_CITY
        ,C.SERVICE_STATE AS PC_SERVICE_STATE
        ,C.SERVICE_POSTAL_CODE AS PC_SERVICE_POSTAL_CODE
        ,C.LONGITUDE AS PC_LONGITUDE
        ,C.LATITUDE AS PC_LATITUDE
        ,C.CARDONFILE AS PC_CARD_ON_FILE
        ,C.PAYMENT_ON_FILE_KIND AS PC_PAYMENT_ON_FILE_KIND
        ,C.TAGS AS PC_TAGS
        ,MIN(C.CREATEDAT) AS PC_CREATED_AT
        ,C.API_KEY AS PC_API_KEY
        ,C.LIFETIME_VALUE AS PC_LIFETIME_VALUE
        ,C.FLASH_MESSAGE AS PC_FLASH_MESSAGE
        ,C.DELETE_FLAG AS PC_DELETE_FLAG
        ,C.DELETED_AT AS PC_DELETE_DATE
        ,'{{ RUN_ID }}' AS PC_CREATED_RUN_ID
        ,MIN(CAST(COALESCE(C.CREATEDAT, C.RUN_TIME) AS DATE)) AS PC_START_DATE
    FROM {{ ref('TEMP_PARTY_CONTACT') }} AS C
    LEFT JOIN {{ this }} AS PC
        ON PC.PC_INTERNAL_PARTY_ID = C.ID
    WHERE PC.PC_INTERNAL_PARTY_ID IS NULL
    GROUP BY
        C.ID, C.NAME, C.ORGANIZATION_ID, C.CAM_CAMPAIGN_ID, C.CHN_CHANNEL_ID, C.UTM_CAMPAIGN,
        C.CAMPAIGN, C.CHANNEL, C.ACCOUNTING_CLASS, C.COMPANY, C.CREATED_BY, C.ROLE, C.CATEGORY,
        C.SERVICE_CITY, C.SERVICE_STATE, C.SERVICE_POSTAL_CODE, C.LONGITUDE, C.LATITUDE,
        C.CARDONFILE, C.PAYMENT_ON_FILE_KIND, C.TAGS, C.API_KEY, C.LIFETIME_VALUE,
        C.FLASH_MESSAGE, C.DELETE_FLAG, C.DELETED_AT, C.PC_PARTY_ORIGIN
),
ORGS_TO_INSERT AS (
    SELECT * FROM MIN_DATE
    {% if SCRIPT == 'INCREMENTAL' %}
    UNION
    SELECT
        HASHBYTES('{{ ALGORITHM }}', CONCAT(C.ID, '|', {{ PARTY_TYPE_CODE }}, '|', '{{ BRAND }}')) AS PC_PARTY_ID
        ,C.ID AS PC_INTERNAL_PARTY_ID
        ,CAST({{ PARTY_TYPE_CODE }} AS INT) AS PC_PARTY_TYPE_CODE
        ,C.PC_PARTY_ORIGIN
        ,C.ORGANIZATION_ID AS PC_ORGANIZATION_ID
        ,C.CAM_CAMPAIGN_ID AS PC_CAMPAIGN_ID
        ,C.CHN_CHANNEL_ID AS PC_CHANNEL_ID
        ,C.UTM_CAMPAIGN AS PC_UTM_CAMPAIGN
        ,C.CAMPAIGN AS PC_CAMPAIGN
        ,C.CHANNEL AS PC_CHANNEL
        ,C.ACCOUNTING_CLASS AS PC_ACCOUNTING_CLASS
        ,COALESCE(C.NAME, 'nan') AS PC_NAME
        ,C.COMPANY AS PC_COMPANY
        ,C.CREATED_BY AS PC_CREATED_BY
        ,C.ROLE AS PC_ROLE
        ,C.CATEGORY AS PC_CATEGORY
        ,C.SERVICE_CITY AS PC_SERVICE_CITY
        ,C.SERVICE_STATE AS PC_SERVICE_STATE
        ,C.SERVICE_POSTAL_CODE AS PC_SERVICE_POSTAL_CODE
        ,C.LONGITUDE AS PC_LONGITUDE
        ,C.LATITUDE AS PC_LATITUDE
        ,C.CARDONFILE AS PC_CARD_ON_FILE
        ,C.PAYMENT_ON_FILE_KIND AS PC_PAYMENT_ON_FILE_KIND
        ,C.TAGS AS PC_TAGS
        ,MIN(C.CREATEDAT) AS PC_CREATED_AT
        ,C.API_KEY AS PC_API_KEY
        ,C.LIFETIME_VALUE AS PC_LIFETIME_VALUE
        ,C.FLASH_MESSAGE AS PC_FLASH_MESSAGE
        ,C.DELETE_FLAG AS PC_DELETE_FLAG
        ,C.DELETED_AT AS PC_DELETE_DATE
        ,'{{ RUN_ID }}' AS PC_CREATED_RUN_ID
        ,MIN(CAST(COALESCE(C.UPDATEDAT, C.RUN_TIME) AS DATE)) AS PC_START_DATE
    FROM {{ ref('TEMP_PARTY_CONTACT') }} AS C
    LEFT JOIN (
        SELECT * FROM {{ this }}
        WHERE PC_INTERNAL_PARTY_ID NOT IN (
            SELECT PC_INTERNAL_PARTY_ID FROM {{ this }} WHERE PC_END_DATE IS NULL
        )
    ) AS PC
        ON PC.PC_INTERNAL_PARTY_ID = C.ID
    WHERE PC.PC_INTERNAL_PARTY_ID IS NOT NULL
    GROUP BY
        C.ID, C.NAME, C.ORGANIZATION_ID, C.CAM_CAMPAIGN_ID, C.CHN_CHANNEL_ID, C.UTM_CAMPAIGN,
        C.CAMPAIGN, C.CHANNEL, C.ACCOUNTING_CLASS, C.COMPANY, C.CREATED_BY, C.ROLE, C.CATEGORY,
        C.SERVICE_CITY, C.SERVICE_STATE, C.SERVICE_POSTAL_CODE, C.LONGITUDE, C.LATITUDE,
        C.CARDONFILE, C.PAYMENT_ON_FILE_KIND, C.TAGS, C.API_KEY, C.LIFETIME_VALUE,
        C.FLASH_MESSAGE, C.DELETE_FLAG, C.DELETED_AT, C.PC_PARTY_ORIGIN
    {% endif %}
),
NEW_ROWS AS (
    SELECT *
        ,LEAD(PC_START_DATE) OVER (PARTITION BY PC_INTERNAL_PARTY_ID ORDER BY PC_INTERNAL_PARTY_ID, PC_START_DATE ASC) AS PC_END_DATE
        ,LEAD(PC_CREATED_RUN_ID) OVER (PARTITION BY PC_INTERNAL_PARTY_ID ORDER BY PC_INTERNAL_PARTY_ID, PC_START_DATE ASC) AS PC_UPDATED_RUN_ID
        ,'{{ BRAND }}' AS PC_BRAND
    FROM ORGS_TO_INSERT
)
SELECT * FROM NEW_ROWS
